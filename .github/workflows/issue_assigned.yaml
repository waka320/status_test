name: Set Issue to ToDo when Assigned

on:
  issues:
    types: [assigned]

jobs:
  update_project_item:
    runs-on: ubuntu-latest
    steps:
      - name: Get Project Info
        uses: actions/github-script@v6
        id: get-project-info
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const query = `
              query($login: String!, $projectNumber: Int!) {
                user(login: $login) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const result = await github.graphql(query, {
              login: "waka320",
              projectNumber: 2
            });
            const projectId = result.user.projectV2.id;
            const statusField = result.user.projectV2.fields.nodes.find(field => field.name === "Status");
            const toDoOption = statusField.options.find(option => option.name === "To Do");
            return { projectId, statusFieldId: statusField.id, toDoOptionId: toDoOption.id };


      - name: Update Issue Status
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { projectId, statusFieldId, toDoOptionId } = ${{ steps.get-project-info.outputs.result }};
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $statusFieldId
                  value: $optionId
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            await github.graphql(mutation, {
              projectId: projectId,
              itemId: context.payload.issue.node_id,
              statusFieldId: statusFieldId,
              optionId: toDoOptionId
            });
