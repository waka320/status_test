name: Set PR and Issue on PR Actions

on:
  pull_request:
    types: [opened, edited ,ready_for_review, closed, reopened, synchronize]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  update_project_item:
    runs-on: ubuntu-latest
    steps:
      - name: Get Project Info
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          project_data=$(gh api graphql -f query='
            query($projectNumber: Int!) {
              viewer {
                projectV2(number: $projectNumber) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
          ' -F projectNumber=2)
          echo "PROJECT_ID=$(echo "$project_data" | jq -r '.data.viewer.projectV2.id')" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$(echo "$project_data" | jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name=="Status") | .id')" >> $GITHUB_ENV
          echo "TODO_OPTION_ID=$(echo "$project_data" | jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="Todo") | .id')" >> $GITHUB_ENV
          echo "IN_REVIEW_OPTION_ID=$(echo "$project_data" | jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "In Review") | .id')" >> $GITHUB_ENV
          echo "TO_BE_MERGED_OPTION_ID=$(echo "$project_data" | jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "To be Merged") | .id')" >> $GITHUB_ENV
          echo "DONE_OPTION_ID=$(echo "$project_data" | jq -r '.data.viewer.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Done") | .id')" >> $GITHUB_ENV

      - name: Update PR Status
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          pr_id=$(gh api graphql -f query='
            query($nodeId: ID!) {
              node(id: $nodeId) {
                ... on PullRequest {
                  id
                }
              }
            }
          ' -f nodeId="${{ github.event.pull_request.node_id }}" --jq '.data.node.id')
          if [[ -z "$TODO_OPTION_ID" ]]; then
            echo "TODO_OPTION_ID is not set"
            exit 1
          fi

          gh api graphql -f mutation='
            mutation($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $statusFieldId
                value: { singleSelectOptionId: $optionId }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId="PVT_kwHOBjwuqc4AxGNS" -f itemId="$pr_id" -f statusFieldId="PVTSSF_lAHOBjwuqc4AxGNSzgnQ01I" -f optionId="$TODO_OPTION_ID

      - name: Update PR and Issue Status
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          update_status() {
            local item_id=$1
            local option_id=$2
            gh api graphql -f query='
              mutation($project: ID!, $item: ID!, $field: ID!, $option: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $field
                  value: {
                    singleSelectOptionId: $option
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            ' -F project=${{ env.PROJECT_ID }} -F item=$item_id -F field=${{ env.STATUS_FIELD_ID }} -F option=$option_id --silent
          }

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              update_status "${{ github.event.pull_request.node_id }}" "${{ env.DONE_OPTION_ID }}"
            elif [[ "${{ github.event.action }}" == "ready_for_review" ]]; then
              update_status "${{ github.event.pull_request.node_id }}" "${{ env.IN_REVIEW_OPTION_ID }}"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request_review" && "${{ github.event.review.state }}" == "approved" ]]; then
            update_status "${{ github.event.pull_request.node_id }}" "${{ env.TO_BE_MERGED_OPTION_ID }}"
          fi

          issue_number=$(echo "${{ github.event.pull_request.body }}" | grep -oP '#\K\d+')
          if [[ -n "$issue_number" ]]; then
            issue_node_id=$(gh api graphql -f query='
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $number) {
                    id
                  }
                }
              }
            ' -F owner=${{ github.repository_owner }} -F repo=${{ github.event.repository.name }} -F number=$issue_number --jq '.data.repository.issue.id')
            update_status "$issue_node_id" "${{ env.STATUS_FIELD_ID }}"
          fi
