name: Set PR and Issue on PR Actions

on:
  pull_request:
    types: [ready_for_review, closed]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  update_status:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get Project Info
        uses: actions/github-script@v6
        id: get-project-info
        with:
          token: ${{ steps.app-token.outputs.token }}
          script: |
            const query = `
              query($org: String!, $projectNumber: Int!) {
                organization(login: $org) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            try {
              const result = await github.graphql(query, {
                org: 'hoge',
                projectNumber: 2
              });

              console.log("GraphQL Query Result:", JSON.stringify(result, null, 2));

              if (!result.organization.projectV2) {
                throw new Error(`ProjectV2 with number 4 not found in organization ${context.repo.owner}`);
              }

              const projectId = result.organization.projectV2.id;
              const statusField = result.organization.projectV2.fields.nodes.find(field => field.name === "Status");

              if (!statusField) {
                throw new Error(`Status field not found in project ${projectId}`);
              }

              return { projectId, statusFieldId: statusField.id, statusOptions: statusField.options };
            } catch (error) {
              console.error("Error executing GraphQL query:", error);
              throw error;
            }

      - name: Update PR and Issue Status
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { projectId, statusFieldId, statusOptions } = ${{ steps.get-project-info.outputs.result }};

            let newStatus;
            if (context.eventName === 'pull_request') {
              if (context.payload.pull_request.merged) {
                newStatus = "Done";
              } else if (context.payload.action === 'ready_for_review') {
                newStatus = "In Review";
              }
            } else if (context.eventName === "pull_request_review" && context.payload.review.state === "approved") {
              newStatus = "To be Merged";
            }

            if (!newStatus) {
              console.log("No status update");
              return;
            }

            const statusOptionId = statusOptions.find(option => option.name === newStatus)?.id;

            const updateStatus = async (itemId) => {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $statusFieldId
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              await github.graphql(mutation, {
                projectId: projectId,
                itemId: itemId,
                statusFieldId: statusFieldId,
                optionId: statusOptionId
              });
            };

            // PRステータス更新
            await updateStatus(context.payload.pull_request.node_id);

            // Issueステータス更新
            const issueNumberMatch = context.payload.pull_request.body.match(/#(\d+)/);
            const issueNumber = issueNumberMatch ? issueNumberMatch[1] : null;
            if (issueNumber) {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber, 10)
              });
              await updateStatus(issue.node_id);
            }
